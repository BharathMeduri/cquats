README_dev

A brief REDME for Developers on the CQuATS project:

High-level Architecture
-----------------------

CQuATS integrates a set of diverse tools into a coherent whole.
The particular tools that currently integrate into the framework are
documented in a Google sheet [1].
Pl refer to this for details.

Step 1.
User invokes the 'menuconfig' script, which is essentially a thin wrapper over
the 'make menuconfig' to configure and setup the CQuATS run.
Internally, this invokes the "Kbuild" ncurses-based menu system; (this is the
same menu system used for Linux kernel menuconfig and several other projects
/ products like buildroot, busybox, etc).
The run produces the required configuration info in an ASCII text file here:
 kbuild/.config

Step  2.
User invokes the 'run_cquats' script. This script carries out the bulk of the
work. Among other stuff, it:
- first checks that required utils, etc are installed
- config: builds a temporary config file from the main one (the .config), and
  parses parts of it bringing in some configs into script variables
- invokes the 'build_cmd()' function:
  this key function "builds" an 'execution matrix' by initializing a '7-d'
  array: sets up the command array for this tool
 Each 'row' will hold the complete details of a tool to run:
          col0   col1   col2    col3      col4          col5           col6
 row'n' [space],[type],[suite],[tool],[tool-desc],[path-to-tool],[parameters-to-tool]
     [0] space     : user-land|kernel-land
     [1] type      : static|dynamic
     [2] suite     : eg. valgrind|perf|...
     [3] tool      : <name of the particular tool>
     [4] tool-desc : <optional description of the particular tool>
     [5] tool-path : <pathname-to-invoke-tool>; under tools/ folder
     [6] params    : parameter(s) to the particular tool being invoked

The 'execution matrix' content is displayed (as CSV) at runtime (via the
showExecutionMatrix() function).

 An example run:
 [...]
Execution Matrix
+-----------------------------------------------------------------------------------------+
+    Space      Type    Suite   ToolName          Description              Run-Command    +
+-----------------------------------------------------------------------------------------+
 1. user-land, static,-na-    ,coccinelle,Coccinelle static analyser,V=1 /home/kaiwan/cquats/cquats_fc26/tools/static/coccinelle/coccichk /home/kaiwan/scratchpad/source_trees/bash-4.4
 2. user-land,dynamic,valgrind,memcheck  ,Valgrind memcheck dynamic analyser,valgrind --tool=memcheck --trace-children=yes --time-stamp=yes --errors-for-leak-kinds=definite ps -a
 3. user-land,dynamic profiling,Perf    ,perf      ,Perf dynamic CPU profiler,/home/kaiwan/cquats/cquats_fc26/.scratch_cquats/.cquats.perf.sh 
 4. user-land, static,-na-    ,flawfinder,Flawfinder security static analyser,flawfinder --context --minlevel=2 --falsepositive /home/kaiwan/scratchpad/source_trees/bash-4.4
+-----------------------------------------------------------------------------------------+
 [...]

Some functionality, like running perf on a particular PID, requires a bit more
sophistication: the build_cmd() function actually generates a small script that
will invoke perf on the detected PID of the target process (which it runs in the
background in an xterm window).

- Finally, the actual running of the 'execution matrix' is carried out by the
'run_cmd()' function. It parses the execution matrix and, one by one, collates
the command with parameters into a variable and runs it.

All output (as well as stderr) is auto-redirected to a log file (which is
./log_cquats.txt); it contains all message with timestamps, etc as far as
possible.


Ref:
[1] http://bit.ly/CQuATS
